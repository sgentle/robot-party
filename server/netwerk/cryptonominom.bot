@robot 'cryptonominom',
  description: "Wraps outgoing and unwraps incoming messages with RSA signatures."
  local: true

privateKey = {
  "kty": "RSA",
  "n": "0YRhe1-ANGVZRIOfeFpjg1VVCIoj0LNOGi5r34PEm6Kx7LOYEF7tGiHVE-p2-a04eYQ9sn6RdliFujPM9FsUYcInIF8IvNB9Wiz3-pRDzy7zdvRIUDYwaZBZACVG0vLroSRHisNHBOPYPNHgQReAQqki-jxUGz_f6wcsXcRKACE",
  "e": "AQAB",
  "d": "A9_q3Zk6ib2GFRpKDLO_O2KMnAfR-b4XJ6zMGeoZ7Lbpi3MW0Nawk9ckVaX0ZVGqxbSIX5Cvp_yjHHpww-QbUFrw_gCjLiiYjM9E8C3uAF5AKJ0r4GBPl4u8K4bpbXeSxSB60_wPQFiQAJVcA5xhZVzqNuF3EjuKdHsw-dk-dPE",
  "p": "7m1_5VRhYA_8WLnIc-emHO1R1_ufAVJDUnsEs8CUW3LnqpJ10VsI_e0l6qZ2Hyqmau_HZxBddElrK_zTCovu1w",
  "q": "4PVqDv_OZAbWr4syXZNv_Mpl4r5suzYMMUD9U8B2JIRnrhmGZPzLx23N9J4hEJ-Xh8tSKVc80jOkrvGlSv-Bxw",
  "dp": "aTOtjA3YTV-gU7Hdza53sCnSw_8FYLrgc6NOJtYhX9xqdevbyn1lkU0zPr8mPYg_F84m6MXixm2iuSz8HZoyzw",
  "dq": "Ri2paYZ5_5B2lwroqnKdZBJMGKFpUDn7Mb5hiSgocxnvMkv6NjT66Xsi3iYakJII9q8CMa1qZvT_cigmdbAh7w",
  "qi": "QNXyoizuGEltiSaBXx4H29EdXNYWDJ9SS5f070BRbAIldqRh3rcNvpY6BKJqFapda1DjdcncZECMizT_GMrc1w"
}

crypto = require? 'crypto'
subtle = window?.crypto.subtle

CRYPTO_OPTS =
  name: "RSASSA-PKCS1-v1_5"
  hash: {name: "SHA-256"}

if crypto
  privPEM = require('pem-jwk').jwk2pem(privateKey)
  #priv = crypto.createCredentials key: privateKey
  sign = (text) -> new Promise (resolve, reject) ->
    signer = crypto.createSign 'RSA-SHA256'
    signer.update new Buffer(text, 'utf-8')
    resolve signer.sign privPEM, 'base64'

else
  encoder = new TextEncoder("utf-8")
  privImport = subtle.importKey('jwk', privateKey, CRYPTO_OPTS, false, ["sign"])
  sign = (text) ->
    privImport
    .then (privKey) ->
      data = encoder.encode(text)
      subtle.sign CRYPTO_OPTS, privKey, data.buffer
    .then (buffer) -> base64js.fromByteArray new Uint8Array(buffer)

publicKey = {
  "kty": "RSA",
  "n": "0YRhe1-ANGVZRIOfeFpjg1VVCIoj0LNOGi5r34PEm6Kx7LOYEF7tGiHVE-p2-a04eYQ9sn6RdliFujPM9FsUYcInIF8IvNB9Wiz3-pRDzy7zdvRIUDYwaZBZACVG0vLroSRHisNHBOPYPNHgQReAQqki-jxUGz_f6wcsXcRKACE",
  "e": "AQAB"
}

if crypto
  pubPEM = require('pem-jwk').jwk2pem(publicKey)
  verify = (text, sig) -> new Promise (resolve, reject) ->
    verifier = crypto.createVerify 'RSA-SHA256'
    verifier.update new Buffer(text, 'utf-8')
    resolve !! verifier.verify pubPEM, sig, 'base64'

else
  pubImport = subtle.importKey('jwk', publicKey, CRYPTO_OPTS, false, ["verify"])
  verify = (msg, sig) ->
    msgdata = encoder.encode(sig)
    sigdata = base64js.toByteArray(sig)
    pubImport
    .then (pubKey) ->
      subtle.verify CRYPTO_OPTS, pubKey, sigdata, msgdata

@transmit "register outgoing"

@listen "outgoing message", ({id, data}, reply) ->
  msg = data
  if msg.trusted
    nonce = (new Date).getTime()

    #FIXME: should dupe objects before they hit @listen
    msg.nonce = nonce
    sign(JSON.stringify msg).then (signature) ->
      reply "pass with changes", {id, changes: {signature, nonce}}
  else
    reply "pass", id

if typeof window isnt "undefined"
  window.sign = sign
  window.verify = verify

@transmit "register incoming"

@listen "incoming message", ({id, data}, reply) ->
  msg = data
  if msg.signature
    signature = msg.signature
    delete msg.signature
    # This is gross
    oldpath = msg.path?.slice() or msg.path
    if Array.isArray(msg.path) and msg.path.length > 1
      msg.path.shift()
    else
      delete msg.path
    puremsg = JSON.stringify msg
    msg.path = oldpath
    msg.signature = signature

    verify puremsg, signature
    .then (result) ->
      console.log "Verified?", result

      reply "pass with changes", {id, changes: {verify: result, trusted: result}}
  else if msg.trusted
    reply "pass with changes", {id, changes: {trusted: false}}
  else
    reply "pass", id
