@robot 'robotracker',
  description: "Tracks robots."
  local: true

robots = {}

cooldown = null
startCooldown = ->
  clearTimeout cooldown
  cooldown = setTimeout (-> cooldown = null), 1000

update = =>
  return if cooldown
  @transmit type: "list robots", local: false
  startCooldown()

update()

updateDebounce = null
updated = =>
  clearTimeout updateDebounce
  updateDebounce = setTimeout =>
    @transmit 'robots updated'
  , 100

networks = {}

@noDefaults ->
  @listen 'network connected', ({data: networkid, path}) ->
    networks[networkid] = path
    setTimeout update, Math.floor(Math.random()*1000)
  @listen 'network disconnected', ({data: networkid, path}) ->
    return unless networks[networkid] = path
    delete networks[networkid]
    anyrobots = false
    for id, robot of robots when robot.network and networkid in robot.network
      delete robots[id]
      anyrobots = true
    updated() if anyrobots


  @listen "list robots", ({local}) ->
    console.warn "starting cooldown"
    startCooldown() unless local

  @listen "I have robots", ({from, path, data: robolist}) ->
    for robot in robolist
      newbot = robots[robot.id] = JSON.parse(JSON.stringify(robot))
      #newbot.parent = from
      newbot.network = path if path
    updated()

  @listen "robot added", ({from, path, data: robot}) ->
    newbot = robots[robot.id] = JSON.parse(JSON.stringify(robot))
    newbot.parent = from
    newbot.network = path if path
    updated()

  @listen "robot removed", ({from, data: id}) ->
    delete robots[id]
    updated()

@listen "inverse query robots", ({data: queries}, reply) ->
  queries = [queries] if !Array.isArray queries
  robolist = (robot for id, robot of robots when not queries.some (query) -> _.matchQuery robot, query)
  robolist.sort (a, b) -> a.id.localeCompare(b.id)
  reply "robot query response", robolist

@listen "query robots", ({data: queries}, reply) ->
  queries = [queries] if !Array.isArray queries
  robolist = (robot for id, robot of robots when queries.some (query) -> _.matchQuery robot, query)
  robolist.sort (a, b) -> a.id.localeCompare(b.id)
  reply "robot query response", robolist

@listen "get robot info", ({data:id}, reply) ->
  if robots[id]
    reply "robot info", robots[id]
  else
    reply "error", "no such robot"
