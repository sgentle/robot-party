@robot "inputnik",
  description: "Input box."
  local: true

@intercept 'distributeUp', (msg, source, distributeUp) ->
  distributeUp msg, source unless msg.type is 'key sent'

range = document.createRange()
frag = (html) -> range.createContextualFragment(html)

inputbox = frag("""
  <div id='inputbox'>
    <div id='rebox'></div>
    <textarea id='cmd' autofocus></textarea>
  </div>
""").firstElementChild

console.log "inputbox", inputbox
window.inputbox = inputbox
@element = inputbox

cmd = inputbox.querySelector('#cmd')
rebox = inputbox.querySelector('#rebox')

@transmit "add style", "
  #inputbox {
    width: 100%;
    height: 2.4em;
    font-family: inherit;
    font-size: inherit;
    display: table;
  }
  #cmd {
    display: table-cell;
    font-family: inherit;
    font-size: inherit;
    width: 100%;
    height: 100%;
  }
  #rebox {
    display: table-cell;
    height: 100%;
    width: 1px;
    max-width: 150em;
    white-space: nowrap;
    background-color: #55F;
    color: #ccc;
    vertical-align: middle;:
  }
"

hide = (el) -> el.style.display = 'none'
show = (el) -> el.style.display = null

hide rebox

cmd.addEventListener 'keydown', (ev) =>
  @transmit "key sent",
    key: ev.which,
    ctrl: ev.ctrlKey,
    alt: ev.altKey,
    meta: ev.metaKey,
    shift: ev.shiftKey,

  ev.preventDefault() if ev.which is 13


@listen "message clicked", ({data: {id, source}}) ->
  if typeof id is 'string'
    rebox.textContent = "RE: #{source}"
    show rebox
  else
    hide rebox

  cmd.focus()

@listen "robot clicked", ({data: id}) ->
  if typeof id is 'string'
    @transmit "get robot info", id, ({data}) ->
      if data.err
        hide rebox
      else
        rebox.textContent = "TO: #{data.name}"
        show rebox
  else
    hide rebox

  cmd.focus()

@listen "get input", ({data}, reply) ->
  reply "input value", cmd.value

@listen "set input", ({data}, reply) ->
  cmd.value = data
  reply "ok"

@listen "append input", ({data}, reply) ->
  cmd.value += data
  reply "ok"
